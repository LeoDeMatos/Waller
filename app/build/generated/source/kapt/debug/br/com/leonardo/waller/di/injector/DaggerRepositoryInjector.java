// Generated by Dagger (https://google.github.io/dagger).
package br.com.leonardo.waller.di.injector;

import br.com.leonardo.core.UnplashAPI;
import br.com.leonardo.core.di.network.NetworkModule;
import br.com.leonardo.core.di.network.NetworkModule_ProvideInterceptorFactory;
import br.com.leonardo.core.di.network.NetworkModule_ProvideOkHttpClientFactory;
import br.com.leonardo.core.di.network.NetworkModule_ProvideRetrofitFactory;
import br.com.leonardo.core.di.network.NetworkModule_ProvideUnplashAPIFactory;
import br.com.leonardo.waller.model.dataManager.UnplashRepository;
import br.com.leonardo.waller.model.dataManager.UnplashRepository_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import dagger.internal.SingleCheck;
import javax.inject.Provider;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

public final class DaggerRepositoryInjector implements RepositoryInjector {
  private Provider<Interceptor> provideInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<UnplashAPI> provideUnplashAPIProvider;

  private DaggerRepositoryInjector(NetworkModule networkModuleParam) {

    initialize(networkModuleParam);
  }

  public static RepositoryInjector.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam) {
    this.provideInterceptorProvider =
        DoubleCheck.provider(NetworkModule_ProvideInterceptorFactory.create(networkModuleParam));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideOkHttpClientFactory.create(
                networkModuleParam, provideInterceptorProvider));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            NetworkModule_ProvideRetrofitFactory.create(
                networkModuleParam, provideOkHttpClientProvider));
    this.provideUnplashAPIProvider =
        SingleCheck.provider(
            NetworkModule_ProvideUnplashAPIFactory.create(
                networkModuleParam, provideRetrofitProvider));
  }

  @Override
  public void inject(UnplashRepository baseRepository) {
    injectUnplashRepository(baseRepository);
  }

  private UnplashRepository injectUnplashRepository(UnplashRepository instance) {
    UnplashRepository_MembersInjector.injectUnplashAPI(instance, provideUnplashAPIProvider.get());
    return instance;
  }

  private static final class Builder implements RepositoryInjector.Builder {
    private NetworkModule networkModule;

    @Override
    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    @Override
    public RepositoryInjector build() {
      Preconditions.checkBuilderRequirement(networkModule, NetworkModule.class);
      return new DaggerRepositoryInjector(networkModule);
    }
  }
}
